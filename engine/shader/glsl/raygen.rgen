#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_debug_printf : enable
#extension GL_GOOGLE_include_directive : enable
#include "random.glsl"
layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraProperties 
{
	mat4 viewInverse;
	mat4 projInverse;
	vec4 lightPos;
} cam;


struct RayPayload {
	vec3 color;
	float distance;
	vec3 normal;
	float reflector;
	bool shadowd;
};
struct ShadowPayload{
    vec3 color;
    int count;
};
layout(location = 0) rayPayloadEXT RayPayload rayPayload;
//layout(location = 1) rayPayloadEXT ShadowPayload shadowPayload;
//layout(location = 2) rayPayloadEXT bool shadowd;
// Max. number of recursion is passed via a specialization constant
layout (constant_id = 0) const int MAX_RECURSION = 0;
vec3 ray_tracing(vec4 origin,vec4 direction,float isRand,int iter){
    uint payloadSeed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, iter);
    direction.x += rnd(payloadSeed)/100 * isRand;
    direction.y += rnd(payloadSeed)/100 * isRand;
    direction.z += rnd(payloadSeed)/100 * isRand;
    vec3 color = vec3(0);
    uint rayFlags = gl_RayFlagsOpaqueEXT;
    uint cullMask = 0xff;
    float tmin = 0.001;
    float tmax = 10000.0;
    for (int i = 0; i < MAX_RECURSION; i++) {
        traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
        vec3 hitColor = rayPayload.color;

        if (rayPayload.distance < 0.0f) {
            color += hitColor;
            break;
        } else if (rayPayload.reflector == 1.0f) {
            const vec4 hitPos = origin + direction * rayPayload.distance;
            origin.xyz = hitPos.xyz + rayPayload.normal * 0.001f;
            direction.xyz = reflect(direction.xyz, rayPayload.normal);
            {
                rayPayload.shadowd = true;
                traceRayEXT(topLevelAS, gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT,
                 cullMask, 0, 0, 1, origin.xyz, tmin, cam.lightPos.xyz, tmax, 0);
                 if(rayPayload.shadowd)
                    color += vec3(-0.3,-0.3,-0.3);
            }
        } else {
            color += hitColor;
            if(i==0)
            {
                rayPayload.shadowd = true;
                traceRayEXT(topLevelAS, gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT,
                 cullMask, 0, 0, 1, origin.xyz, tmin, cam.lightPos.xyz, tmax, 0);
                 if(rayPayload.shadowd)
                    color += vec3(-0.3,-0.3,-0.3);
            }
            break;
        }
    }
    return color;
}
void main()
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin = cam.viewInverse * vec4(0,0,0,1);
    vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;
    vec4 direction = cam.viewInverse * vec4(normalize(target.xyz / target.w), 0);
	vec3 color = ray_tracing(origin,direction,0,0);
	const int SPP = 10;
	vec3 extraColor=vec3(0);
	for(int ray=1;ray<=SPP;++ray){
	    extraColor+= ray_tracing(origin,direction,1,ray);
	}
    extraColor/=SPP;
    color = mix(color,extraColor,0.3);
	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 0.0));
}
